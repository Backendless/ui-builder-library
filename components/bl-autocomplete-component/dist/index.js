!function(e, t){if('object'==typeof exports&&'object'==typeof module)module.exports=t();else if('function'==typeof define&&define.amd)define([], t);else{const a=t();for(const o in a)('object'==typeof exports?exports:e)[o]=a[o];}}(self, (() => (() => {'use strict';var e={ d:(t, a) => {for(const o in a)e.o(a, o)&&!e.o(t, o)&&Object.defineProperty(t, o, { enumerable:!0, get:a[o] });}, o:(e, t) => Object.prototype.hasOwnProperty.call(e, t), r:e => {'undefined'!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e, Symbol.toStringTag, { value:'Module' }), Object.defineProperty(e, '__esModule', { value:!0 });} }, t={};e.r(t), e.d(t, { default:() => b });const a=self.React, o='HANDLE_SUGGESTIONS_OPEN', n='HANDLE_INPUT_VALUE', l='HANDLE_AUTOCOMPLETE_VALUE', c='HANDLE_AUTOCOMPLETE_ACTIVE', s='HANDLE_AUTOCOMPLETE_DISABLE', u=(e, t) => {switch(t.type){case o:return{ ...e, isSuggestionsOpen:t.value };case n:return{ ...e, inputValue:t.value };case l:return{ ...e, inputValue:'', autocompleteValue:t.value };case c:return{ ...e, isAutocompleteActive:!0 };case s:return{ ...e, isAutocompleteActive:!1, isSuggestionsOpen:!1 };default:return e;}}, r={ isSuggestionsOpen:!1, isAutocompleteActive:!1, inputValue:'', autocompleteValue:null }, i=({ dispatch:e, item:t, onAutocompleteChange:a }) => React.createElement('div', { onClick:() => {return e({ type:l, value:n=t }), e({ type:o, value:!1 }), void(a&&a({ autocompleteValue:n }));let n;}, className:'suggestion' }, t.label), m=({ state:e, autocompleteHeight:t, dispatch:o, onAutocompleteChange:n }) => {const{ suggestions:l }=e, [c, s]=(0, a.useState)('bottom'), u=(0, a.useRef)(), r={ inset:'top'===c?'auto auto 0 0':'0 auto auto 0', ['top'===c?'marginBottom':'marginTop']:'55px' };return(0, a.useLayoutEffect)((() => {const e=() => {const e=window.innerHeight, { bottom:a, height:o }=u.current.getBoundingClientRect();s((n => e-('top'===n?a+t+o:a)>0?'bottom':'top'));};return e(), document.addEventListener('wheel', e), () => document.removeEventListener('wheel', e);}), [t]), React.createElement('div', { ref:u, style:r, className:'suggestions' }, l.length?l.map((e => React.createElement(i, { key:e.label, item:e, dispatch:o, onAutocompleteChange:n }))):React.createElement('div', { className:'suggestion' }, 'No options'));}, p=(0, a.forwardRef)((({ state:e, dispatch:t }, a) => {const{ inputValue:l, autocompleteValue:c, isSuggestionsOpen:s }=e;let u;return u=c&&!l&&c?c?.label:l, React.createElement('div', { onClick:() => t({ type:o, value:!s }), className:'input__container' }, React.createElement('input', { ref:a, type:'text', id:'autocomplete', autoComplete:'off', value:u, onChange:({ target:{ value:e } }) => {t({ type:n, value:e }), t({ type:o, value:!0 });}, className:'input__field' }));})), d=({ label:e, state:t }) => {const{ isAutocompleteActive:a, autocompleteValue:o }=t, n={ transform:a||o?'translate(14px, -9px) scale(0.75)':'translate(14px, 16px) scale(1)' };return React.createElement('label', { htmlFor:'autocomplete', style:n, className:'label' }, e);}, f=({ state:e, dispatch:t, onButtonClearClick:a }) => {const{ isSuggestionsOpen:c }=e;return React.createElement('div', { className:'button-container' }, e.autocompleteValue&&React.createElement('button', { tabIndex:'-1', type:'button', onClick:() => {t({ type:l, value:null }), t({ type:n, value:'' }), a&&a({ autocompleteValue:null });}, className:'button button__clear' }, React.createElement('svg', { focusable:'false', 'aria-hidden':'true', viewBox:'0 0 24 24', className:'icon' }, React.createElement('path', { d:'M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z' }))), React.createElement('button', { tabIndex:'-1', type:'button', onClick:() => {t({ type:o, value:!c });}, className:(() => {const e=['button'];return c&&e.push('button__popup-up'), e.join(' ');})() }, React.createElement('svg', { focusable:'false', 'aria-hidden':'true', viewBox:'0 0 24 24', className:'icon' }, React.createElement('path', { d:'M7 10l5 5 5-5z' }))));}, v=({ label:e, state:t }) => {const{ autocompleteValue:a, isAutocompleteActive:o }=t, n={ maxWidth:o||a?'100%':'0', transition:o||a?'max-width 100ms cubic-bezier(0, 0, 0.2, 1) 0ms':'max-width 50ms cubic-bezier(0, 0, 0.2, 1) 0ms' };return React.createElement('fieldset', { className:'fieldset' }, React.createElement('legend', { style:n, className:'legend' }, e));}, g=(0, a.forwardRef)((({ label:e, state:t, dispatch:o, onButtonClearClick:n }, l) => {const s=(0, a.useRef)(null);return React.createElement('div', { ref:l, onClick:() => {s.current.focus(), o({ type:c });}, className:'autocomplete' }, React.createElement(d, { label:e, state:t }), React.createElement('div', { className:'autocomplete__text-field' }, React.createElement(p, { ref:s, state:t, dispatch:o }), React.createElement(f, { state:t, dispatch:o, onButtonClearClick:n }), React.createElement(v, { label:e, state:t })));}));function b({ component:e, eventHandlers:t }){const{ label:o, suggestions:l, classList:c }=e, { onAutocompleteChange:i, onButtonClearClick:p }=t, d=(0, a.useRef)(), f=(0, a.useRef)(), [v, b]=(e => {const[t, o]=(0, a.useReducer)(u, r);return[(0, a.useMemo)((() => {const a=e.filter((({ label:e }) => e.toLowerCase().includes(t.inputValue.toLowerCase())));return{ ...t, suggestions:a };}), [t, e]), o];})((E=l)?'string'==typeof E?E.split(',').map((e => ({ objectId:e, value:e, label:e }))):'object'==typeof E?Object.values(E):void 0:[]);let E;const h=(e => {const{ classList:t, autocompleteValue:o, isAutocompleteActive:n }=e, l=(0, a.useMemo)((() => {const e=['bl-customComponent-autocomplete', ...t];return o&&l.push('has-clear-button'), n&&l.push('autocomplete-focused'), e.join(' ');}), []);return l;})({ classList:c, autocompleteValue:v.autocompleteValue, isAutocompleteActive:v.isAutocompleteActive }), y=f.current?.getBoundingClientRect()?.height, R=(0, a.useCallback)((() => {b({ type:s }), b({ type:n, value:'' });}), [b]);let A, C;return A=d, C=R, (0, a.useEffect)((() => {const e=e => {A.current&&!A.current.contains(e.target)&&C(e);};return document.addEventListener('mousedown', e), document.addEventListener('touchstart', e), () => {document.removeEventListener('mousedown', e), document.removeEventListener('touchstart', e);};}), [A, C]), React.createElement('div', { ref:d, className:h }, React.createElement(g, { ref:f, label:o, state:v, dispatch:b, onButtonClearClick:p }), v.isSuggestionsOpen&&React.createElement(m, { state:v, autocompleteHeight:y, dispatch:b, onAutocompleteChange:i }));}return t;})()));