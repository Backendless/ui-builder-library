{
  "id": "c_641f41b2f5632a22749fc992d3ca410e",
  "name": "Input with Mask",
  "description": "This component allows you add input with mask",
  "showInToolbox": true,
  "faIcon": "mask",
  "mainJS": "dist/index.js",
  "type": "custom",
  "category": "Custom Components",
  "properties": [
    {
      "type": "text",
      "name": "initValue",
      "label": "Value",
      "showInSettings": true,
      "hasLogicHandler": true,
      "handlerId": "initValueLogic",
      "handlerLabel": "Value Logic",
      "dataBinding": true
    },
    {
      "type": "select",
      "name": "maskType",
      "label": "Mask Type",
      "showInSettings": true,
      "defaultValue": "Number",
      "hasLogicHandler": true,
      "handlerId": "maskTypeLogic",
      "handlerLabel": "Mask Type Logic",
      "options": [
        {
          "value": "Number",
          "label": "Number"
        },
        {
          "value": "String",
          "label": "String"
        },
        {
          "value": "RegExp",
          "label": "RegExp"
        },
        {
          "value": "Enum",
          "label": "Enum"
        },
        {
          "value": "Range",
          "label": "Range"
        },
        {
          "value": "Date",
          "label": "Date"
        }
      ],
      "handlerDescription": "This is a handler for the logic to determine type of mask(Number, String, RegExp).",
      "settingTooltip": "Allows select type of mask(Number, String, RegExp).  "
    },
    {
      "type": "text",
      "name": "mask",
      "label": "Mask",
      "showInSettings": true,
      "hasLogicHandler": true,
      "handlerId": "maskLogic",
      "dataBinding": true,
      "handlerDescription": "This is a handler for the logic to determine mask.",
      "settingTooltip": "Allows to specify the mask. 0 - any digit; a - any letter; * - any char. Or you can write RegExp. "
    },
    {
      "type": "text",
      "name": "maskEnum",
      "label": "Enum",
      "showInSettings": true,
      "hasLogicHandler": true,
      "handlerId": "maskEnumLogic",
      "handlerLabel": "Enum Logic",
      "dataBinding": true
    },
    {
      "type": "json",
      "name": "definitions",
      "label": "Definitions",
      "showInSettings": true,
      "hasLogicHandler": true,
      "handlerId": "definitionsLogic",
      "handlerLabel": "Definitions Logic",
      "dataBinding": true
    },
    {
      "type": "json",
      "name": "blocks",
      "label": "Blocks",
      "showInSettings": true,
      "hasLogicHandler": true,
      "handlerId": "blocksLogic",
      "handlerLabel": "Blocks Logic",
      "dataBinding": true
    },
    {
      "type": "text",
      "name": "displayChar",
      "label": "Display Char",
      "showInSettings": true,
      "hasLogicHandler": true,
      "handlerId": "displayCharLogic",
      "handlerLabel": "Display Char Logic",
      "dataBinding": true
    },
    {
      "type": "text",
      "name": "placeholderChar",
      "label": "Placeholder Char",
      "showInSettings": true,
      "defaultValue": "_",
      "hasLogicHandler": true,
      "handlerId": "placeholderCharLogic",
      "handlerLabel": "Placeholder Char Logic",
      "dataBinding": true,
      "handlerDescription": "This is a handler for the logic to determine a placeholder character.",
      "settingTooltip": "Allows to specify placeholder char. If it is left empty, the default value will be `_`."
    },
    {
      "type": "number",
      "name": "scaleNumber",
      "label": "Scale of Number",
      "showInSettings": true,
      "defaultValue": "2",
      "hasLogicHandler": true,
      "handlerId": "scaleNumberLogic",
      "handlerLabel": "Scale of Number Logic",
      "dataBinding": true
    },
    {
      "type": "text",
      "name": "min",
      "label": "Min",
      "showInSettings": true,
      "hasLogicHandler": true,
      "handlerId": "minLogic",
      "handlerLabel": "Min Loagic",
      "dataBinding": true
    },
    {
      "type": "text",
      "name": "max",
      "label": "Max",
      "showInSettings": true,
      "hasLogicHandler": true,
      "handlerId": "maxLogic",
      "handlerLabel": "Max Logic",
      "dataBinding": true
    },
    {
      "type": "text",
      "name": "thousandsSeparator",
      "label": "Thousands Separator",
      "showInSettings": true,
      "hasLogicHandler": true,
      "handlerId": "thousandsSeparatorLogic",
      "handlerLabel": "Thousands Separator Logic",
      "dataBinding": true
    },
    {
      "type": "checkbox",
      "name": "padFractionalZeros",
      "label": "Pad Fractional Zeros",
      "showInSettings": true,
      "hasLogicHandler": true,
      "handlerId": "padFractionalZerosLogic",
      "handlerLabel": "Pad Fractional Zeros Logic",
      "dataBinding": true
    },
    {
      "type": "checkbox",
      "name": "normalizeZeros",
      "label": "Normalize Zeros",
      "showInSettings": true,
      "defaultValue": true,
      "hasLogicHandler": true,
      "handlerId": "normalizeZerosLogic",
      "handlerLabel": "Normalize Zeros Logic",
      "dataBinding": true
    },
    {
      "type": "text",
      "name": "radix",
      "label": "Radix",
      "showInSettings": true,
      "defaultValue": ",",
      "hasLogicHandler": true,
      "handlerId": "radixLogic",
      "handlerLabel": "Radix Logic",
      "dataBinding": true
    },
    {
      "type": "text",
      "name": "placeholder",
      "showInSettings": true,
      "hasLogicHandler": true,
      "handlerId": "placeholderLogic",
      "dataBinding": true,
      "label": "Placeholder",
      "handlerDescription": "This is a handler for the logic to determine a placeholder.",
      "settingTooltip": "Allows to specify placeholder."
    },
    {
      "type": "checkbox",
      "name": "lazy",
      "label": "Lazy",
      "showInSettings": true,
      "hasLogicHandler": true,
      "handlerId": "lazyLogic",
      "handlerDescription": "This is a handler for the logic to determine a lazy. If lazy is true mask is not visible, and if lazy is false mask visible, but if the mask is visible, the input value includes the mask.",
      "settingTooltip": " Allows to specify lazy or not lazy. Lazy it's when the input doesn't display the template of the mask. For example, Mask: `000 000 000`, Placeholder Char: `_`, Lazy: `checked` input will be empty, but if Lazy: `unchecked` input will be `___ ___ ___` "
    },
    {
      "type": "select",
      "name": "variant",
      "label": "Variant",
      "showInSettings": true,
      "defaultValue": "standard",
      "hasLogicHandler": true,
      "handlerId": "variantLogic",
      "handlerLabel": "Variant Logic",
      "dataBinding": true,
      "options": [
        {
          "value": "standard",
          "label": "Standard"
        },
        {
          "value": "filled",
          "label": "Filled"
        },
        {
          "value": "outline",
          "label": "Outline"
        }
      ],
      "handlerDescription": "This is a handler for the logic to choose one of three style variants - outlined, standard, or filled.",
      "settingTooltip": "Allows to choose one of three style variants - outlined, standard, or filled."
    },
    {
      "type": "select",
      "name": "overwrite",
      "label": "Overwrite",
      "showInSettings": true,
      "defaultValue": "no",
      "hasLogicHandler": true,
      "handlerId": "overwriteLogic",
      "handlerLabel": "Overwrite Logic",
      "dataBinding": true,
      "options": [
        {
          "value": "no",
          "label": "No"
        },
        {
          "value": "yes",
          "label": "Yes"
        },
        {
          "value": "shift",
          "label": "Shift"
        }
      ]
    },
    {
      "type": "select",
      "name": "eager",
      "label": "Eager",
      "showInSettings": true,
      "defaultValue": "no",
      "hasLogicHandler": true,
      "handlerId": "eagerLogic",
      "handlerLabel": "Eager Logic",
      "options": [
        {
          "value": "no",
          "label": "No"
        },
        {
          "value": "yes",
          "label": "Yes"
        },
        {
          "value": "append",
          "label": "Append"
        },
        {
          "value": "remove",
          "label": "Remove"
        }
      ]
    },
    {
      "type": "select",
      "name": "autofix",
      "label": "Autofix",
      "showInSettings": true,
      "defaultValue": "no",
      "hasLogicHandler": true,
      "handlerId": "autofixLogic",
      "handlerLabel": "Autofix Logic",
      "dataBinding": true,
      "options": [
        {
          "value": "no",
          "label": "No"
        },
        {
          "value": "yes",
          "label": "Yes"
        },
        {
          "value": "pad",
          "label": "Pad"
        }
      ]
    },
    {
      "type": "number",
      "name": "from",
      "label": "From",
      "showInSettings": true,
      "hasLogicHandler": true,
      "handlerId": "fromLogic",
      "handlerLabel": "From Logic",
      "dataBinding": true
    },
    {
      "type": "number",
      "name": "to",
      "label": "To",
      "showInSettings": true,
      "hasLogicHandler": true,
      "handlerId": "toLogic",
      "handlerLabel": "To Logic",
      "dataBinding": true
    },
    {
      "type": "checkbox",
      "name": "skipInvalid",
      "label": "Skip Invalid",
      "showInSettings": true,
      "hasLogicHandler": true,
      "handlerId": "skipInvalidLogic",
      "handlerLabel": "Skip Invalid Logic",
      "dataBinding": true
    },
    {
      "type": "text",
      "name": "mapToRadix",
      "label": "Map to Radix",
      "showInSettings": true,
      "hasLogicHandler": true,
      "handlerId": "mapToRadixLogic",
      "handlerLabel": "Map to Radix Logic",
      "dataBinding": true
    },
    {
      "type": "json",
      "name": "dynamicMask",
      "label": "Dynamic Mask",
      "showInSettings": true,
      "hasLogicHandler": true,
      "handlerId": "dynamicMaskLogic",
      "handlerLabel": "Dynamic Mask Logic",
      "dataBinding": true
    },
    {
      "type": "text",
      "name": "dateFormat",
      "label": "Date Format",
      "showInSettings": true,
      "defaultValue": "DD/MM/YYYY",
      "hasLogicHandler": true,
      "handlerId": "dateFormatLogic",
      "handlerLabel": "Date Format Logic",
      "dataBinding": true
    }
  ],
  "eventHandlers": [
    {
      "name": "onChangeValue",
      "label": "On Change Value",
      "contextBlocks": [
        {
          "id": "value",
          "label": "Value"
        },
        {
          "id": "unmaskedValue",
          "label": "Unmasked Value"
        }
      ],
      "handlerDescription": "This event is triggered when the component's state (value) changes."
    },
    {
      "name": "onValidate",
      "label": "On Validate",
      "output": true,
      "contextBlocks": [
        {
          "id": "value",
          "label": "Value"
        },
        {
          "id": "mask",
          "label": "Mask"
        }
      ],
      "handlerDescription": "This event is triggered before the component value changes. Using this event we can additionally ourself check and modify each symbol that we input."
    },
    {
      "name": "onComplete",
      "label": "On Complete",
      "handlerDescription": "This event is triggered when the value is completely filled. This makes sense only for custom masks.",
      "contextBlocks": [
        {
          "id": "value",
          "label": "Value"
        },
        {
          "id": "mask",
          "label": "Mask"
        }
      ]
    },
    {
      "name": "onFocusEvent",
      "label": "On Focus Event",
      "handlerDescription": "This event is fired when the component receives the focus for data entry or by pressing the TAB key.",
      "contextBlocks": [
        {
          "id": "event",
          "label": "Event"
        }
      ]
    },
    {
      "name": "onLostFocusEvent",
      "label": "On Lost Focus Event",
      "handlerDescription": "This event is triggered when the component loses focus.",
      "contextBlocks": [
        {
          "id": "event",
          "label": "Event"
        }
      ]
    },
    {
      "name": "onMouseEnter",
      "label": "On Mouse Enter",
      "handlerDescription": "This event is triggered when the mouse enters the component.",
      "contextBlocks": [
        {
          "id": "event",
          "label": "Event"
        }
      ]
    },
    {
      "name": "onMouseLeave",
      "label": "On Mouse Leave",
      "handlerDescription": "This event is triggered when the mouse leaves the component.",
      "contextBlocks": [
        {
          "id": "event",
          "label": "Event"
        }
      ]
    }
  ],
  "actions": []
}
