{
  "id": "c_d1f8827ddc045865c9056b397aebf632",
  "name": "TreeSelect",
  "description": "This is a form component to choose from hierarchical data.",
  "showInToolbox": true,
  "faIcon": "tasks",
  "mainJS": "dist/index.js",
  "type": "custom",
  "category": "Custom Components",
  "properties": [
    {
      "type": "text",
      "name": "label",
      "showInSettings": true,
      "hasLogicHandler": true,
      "handlerId": "labelLogic",
      "label": "Label",
      "defaultValue": "Select Items",
      "handlerLabel": "Label Logic",
      "handlerDescription": "This is a handler for the logic to determine a label displayed in the selection box. When the handler returns a string, it is used as the label.",
      "settingTooltip": "Controls the hint text for the input field."
    },
    {
      "type": "json",
      "name": "options",
      "label": "Options",
      "showInSettings": true,
      "defaultValue": "[{\"key\": \"0\", \"label\": \"Documents\", \"data\": \"Documents Folder\"}, {\"key\": \"1\", \"label\": \"Events\", \"data\": \"Events Folder\"}, {\"key\": \"2\", \"label\": \"Movies\", \"data\": \"Movies Folder\"}]",
      "hasLogicHandler": true,
      "handlerId": "optionsLogic",
      "handlerLabel": "Options Logic",
      "handlerDescription": "This is a handler for the logic to determine a collection of options provided by the component.",
      "settingTooltip": "Specifies an array of options to display. Signature of Option: {key: String, label: String, data: Any, children: [ Option ]}."
    },
    {
      "type": "text",
      "name": "selectedOptionKey",
      "label": "Selected Option Key(s)",
      "showInSettings": true,
      "hasLogicHandler": true,
      "handlerId": "selectedOptionKeyLogic",
      "handlerLabel": "Selected Option Key(s) Logic",
      "handlerDescription": "This is a handler for the logic to make a programmatic selection of the option(s). The handler should return the key assigned to the option which the logic would like to select for single mode. In multiple mode it should return object with key-value pairs where key is the node key and value is a boolean to indicate selection. In checkbox mode, instead of a boolean, value should be an object that has \"checked\" and \"partialChecked\" properties to represent the checked state of a node.",
      "settingTooltip": "Controls the selection state of the component. If there are several keys, they should be separated by commas."
    },
    {
      "type": "select",
      "name": "selectionMode",
      "label": "Selection Mode",
      "showInSettings": true,
      "defaultValue": "single",
      "hasLogicHandler": false,
      "handlerId": "selectionModeLogic",
      "options": [
        {
          "value": "single",
          "label": "Single"
        },
        {
          "value": "multiple",
          "label": "Multiple"
        },
        {
          "value": "checkbox",
          "label": "Checkbox"
        }
      ],
      "settingTooltip": "Controls the selection mode of the options."
    },
    {
      "type": "checkbox",
      "name": "chipsVisibility",
      "label": "Chips Visibility",
      "showInSettings": true,
      "hasLogicHandler": false,
      "handlerId": "chipsVisibilityLogic",
      "settingTooltip": "Enables showing selected items as tokens."
    },
    {
      "type": "checkbox",
      "name": "disabled",
      "label": "Disabled",
      "showInSettings": true,
      "hasLogicHandler": true,
      "handlerId": "disabledLogic",
      "handlerLabel": "Disabled State Logic",
      "handlerDescription": "This is a handler for the logic to determine if the component should be disabled. When the handler returns true, the component becomes disabled.",
      "settingTooltip": "Specifies that the component should be disabled."
    },
    {
      "type": "checkbox",
      "name": "filterVisibility",
      "label": "Filter Visibility",
      "showInSettings": true,
      "hasLogicHandler": false,
      "handlerId": "filterVisibilityLogic",
      "defaultValue": true,
      "settingTooltip": "Enables showing an input field to filter the items."
    },
    {
      "type": "checkbox",
      "name": "resetFilterOnHide",
      "label": "Reset Filter On Hide",
      "showInSettings": true,
      "hasLogicHandler": false,
      "handlerId": "resetFilterOnHideLogic",
      "settingTooltip": "Enables clearing the filter value when hiding the dropdown list."
    },
    {
      "type": "checkbox",
      "name": "filterInputAutoFocus",
      "label": "Filter Input Auto Focus",
      "showInSettings": true,
      "defaultValue": true,
      "hasLogicHandler": false,
      "handlerId": "filterInputAutoFocusLogic",
      "settingTooltip": "Enables focusing the filter input automatically when the dropdown list is opened."
    },
    {
      "type": "text",
      "name": "filterPlaceholder",
      "label": "Filter Placeholder",
      "showInSettings": true,
      "hasLogicHandler": false,
      "handlerId": "filterPlaceholderLogic",
      "settingTooltip": "Controls placeholder text to show when filter input is empty."
    },
    {
      "type": "text",
      "name": "optionsPanelHeight",
      "label": "Options Panel Height",
      "showInSettings": true,
      "defaultValue": "400px",
      "hasLogicHandler": false,
      "handlerId": "optionsPanelHeightLogic",
      "settingTooltip": "Controls maximum height of the options panel."
    },
    {
      "type": "checkbox",
      "name": "metaKeySelection",
      "label": "Meta Key Selection",
      "showInSettings": true,
      "hasLogicHandler": false,
      "handlerId": "metaKeySelectionLogic",
      "settingTooltip": "Feature Only for a \"Multiple\" selection mode. Allows a Multiple selection only with pressed meta key. Meta keys: Cmd(Mac) or Ctrl(Win/Linux)."
    },
    {
      "type": "text",
      "name": "emptyMessage",
      "label": "Empty Message",
      "showInSettings": true,
      "defaultValue": "No results found",
      "hasLogicHandler": false,
      "handlerId": "emptyMessageLogic",
      "settingTooltip": "Controls text to display when there are no options."
    }
  ],
  "eventHandlers": [
    {
      "name": "onShow",
      "label": "On Show Event",
      "handlerDescription": "This event is fired when the overlay is shown."
    },
    {
      "name": "onHide",
      "label": "On Hide Event",
      "handlerDescription": "This event is fired when the overlay is hidden."
    },
    {
      "name": "onChange",
      "label": "On Change Event",
      "contextBlocks": [
        {
          "id": "selectedItems",
          "label": "Selected Items"
        }
      ],
      "handlerDescription": "This event is fired when the component's state (value) changes."
    },
    {
      "name": "onSelect",
      "label": "On Select Event",
      "contextBlocks": [
        {
          "id": "selectedItem",
          "label": "Selected Item"
        }
      ],
      "handlerDescription": "This event is fired when the item is selected."
    },
    {
      "name": "onUnselect",
      "label": "On Unselect Event",
      "handlerDescription": "This event is fired when the item is unselected.",
      "contextBlocks": [
        {
          "id": "unselectedItem",
          "label": "Unselected Item"
        }
      ]
    },
    {
      "name": "onExpand",
      "label": "On Expand Event",
      "handlerDescription": "This event is fired when the item is expanded.",
      "contextBlocks": [
        {
          "id": "expandedItem",
          "label": "Expanded Item"
        }
      ]
    },
    {
      "name": "onCollapse",
      "label": "On Collapse Event",
      "handlerDescription": "This event is fired when the item is collapsed.",
      "contextBlocks": [
        {
          "id": "collapsedItem",
          "label": "Collapsed Item"
        }
      ]
    }
  ],
  "actions": [
    {
      "id": "expandAll",
      "label": "Expand All Options for"
    },
    {
      "id": "collapseAll",
      "label": "Collapse All Options for"
    }
  ]
}
